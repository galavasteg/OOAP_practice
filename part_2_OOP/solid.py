"""
----------------------- TASK 4 -----------------------

Приведите пример иерархии классов (словесное описание), где применяется принцип
Открыт-Закрыт, и обоснуйте, почему одни классы (модули) выбраны открытыми, а
другие закрытыми.

Дядюшка Боб зафиксировал The Open Closed Principle (OCP) слова Бертрана Мейера:
"Программные сущности должны быть открыты для расширения и закрыты для изменения."
Далее продолжает: "... должна иметься возможность расширять поведение
программных сущностей без их изменения."

Продолжу мысль "велосипедной" иерархией из предущих заданий:
https://github.com/galavasteg/OOAP_practice/blob/master/part_2_OOP/iInheritance_composition_polymorphism.py

Класс "Bicycle" закрыт: он описывает базовую модель типа (наличие колес,
руля, способность перемещаться, поворачивать и т.д.). В то время как класс
"ElectricRoadBicycle" - открытый - расширяет "Bicycle" новыми возможностями
(например, способность перемещаться с помощью энергии двигателя), опираясь
на уже заложенную в родителя базовую модель, НЕ изменяя ее реализацию.


----------------------- TASK 5 -----------------------

Какие из пяти принципов повторного использования модуля поддерживаются в
используемом вами языке программирования (в дополнение к классам как базовой
синтаксической единице)?

----------------------- TASK 6 -----------------------

Существуют ли ситуации, когда связи между модулями должны делаться публичными?

Какие метрики вы бы предложили для количественной оценки принципов организации
модулей?

Если вы разрабатывали программы, в которых было хотя бы 3-5 классов, как бы вы
оценили их модульность по этим метрикам?

"""
